{"version":3,"sources":["logo.svg","components/color.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","ColorPicker","_ref","colors","_useState","useState","_useState2","_slicedToArray","showColors","setShowColors","_useState3","_useState4","selectedColor","setSelectedColor","React","createElement","onClick","map","color","index","key","style","backgroundColor","width","height","display","margin","handleColorClick","App","Fragment","reportWebVitals","onPerfEntry","Function","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6JCoCzBC,EAlCK,SAAHC,GAAmB,IAAbC,EAAMD,EAANC,OAAMC,EACSC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAA5CI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAAAI,EACUL,mBAAS,MAAKM,EAAAJ,YAAAG,EAAA,GAAjDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAOtC,OACEG,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAQC,QAAS,kBAAMP,GAAeD,KAAa,gBAClDA,GACCM,IAAAC,cAAA,WACGZ,EAAOc,IAAI,SAACC,EAAOC,GAAK,OACvBL,IAAAC,cAAA,OACEK,IAAKD,EACLE,MAAO,CACLC,gBAAiBJ,EACjBK,MAAO,OACPC,OAAQ,OACRC,QAAS,eACTC,OAAQ,OAEVV,QAAS,kBApBI,SAACE,GACxBL,EAAiBK,GACjBT,GAAc,GAkBWkB,CAAiBT,SAKvCN,GAAiBE,IAAAC,cAAA,SAAG,mBAAiBH,KClB7BgB,MATf,WAEE,OACEd,IAAAC,cAAAD,IAAAe,SAAA,KACAf,IAAAC,cAACd,EAAW,CAACE,OAHA,CAAC,MAAO,QAAS,OAAQ,SAAU,aCOrC2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCjC,EAAAkC,EAAA,GAAAC,KAAAnC,EAAAoC,KAAA,UAAqBD,KAAK,SAAAhC,GAAiD,IAA9CkC,EAAMlC,EAANkC,OAAQC,EAAMnC,EAANmC,OAAQC,EAAMpC,EAANoC,OAAQC,EAAMrC,EAANqC,OAAQC,EAAOtC,EAAPsC,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH/B,IAAAC,cAACD,IAAMgC,WAAU,KACfhC,IAAAC,cAACa,EAAG,QAORE","file":"static/js/main.f47aedd7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React, { useState } from 'react';\n\nconst ColorPicker = ({ colors }) => {\n  const [showColors, setShowColors] = useState(false);\n  const [selectedColor, setSelectedColor] = useState(null);\n\n  const handleColorClick = (color) => {\n    setSelectedColor(color);\n    setShowColors(false);\n  };\n\n  return (\n    <div>\n      <button onClick={() => setShowColors(!showColors)}>Pick a color</button>\n      {showColors && (\n        <div>\n          {colors.map((color, index) => (\n            <div\n              key={index}\n              style={{\n                backgroundColor: color,\n                width: '50px',\n                height: '50px',\n                display: 'inline-block',\n                margin: '5px',\n              }}\n              onClick={() => handleColorClick(color)}\n            ></div>\n          ))}\n        </div>\n      )}\n      {selectedColor && <p>Selected color: {selectedColor}</p>}\n    </div>\n  );\n};\n\nexport default ColorPicker;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ColorPicker from './components/color'\nfunction App() {\n  const colors = ['RED', 'GREEN', 'BLUE', 'ORANGE', 'BLACK'];\n  return (\n    <>\n    <ColorPicker colors={colors} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}